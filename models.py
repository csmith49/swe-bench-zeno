"""
Pydantic data models for SWE-bench reports generated by OpenHands.
"""

from __future__ import annotations

import os
from pydantic import BaseModel, FilePath


class SWEBenchPath(BaseModel):
    """
    Pairs files containing trajectories with their results. Ensures the files exist.
    """

    trajectories: FilePath
    results: FilePath
    metadata: FilePath

    @staticmethod
    def from_directory(
        directory: str,
        trajectory_filename: str = "output.jsonl",
        results_filename: str = "output.swebench_eval.jsonl",
        metadata_filename: str = "metadata.json",
    ) -> SWEBenchPath:
        """
        Build a `SWEBenchPath` object from the files in the directory.
        """
        return SWEBenchPath(
            trajectories=FilePath(os.path.join(directory, trajectory_filename)),
            results=FilePath(os.path.join(directory, results_filename)),
            metadata=FilePath(os.path.join(directory, metadata_filename)),
        )

    @property
    def name(self) -> str:
        return os.path.basename(os.path.dirname(self.trajectories))


class SWEBenchInstance(BaseModel):
    """
    Test results for a single SWE-bench instance.
    """

    instance_id: str
    test_result: SWEBenchTestResult


class SWEBenchTestResult(BaseModel):
    """
    The result of executing an agent on an instance.
    """

    git_patch: str
    report: SWEBenchTestReport
    apply_patch_output: str | None = None
    test_output: str | None = None


class SWEBenchTestReport(BaseModel):
    """
    Summary of the performance of the agent.
    """

    empty_generation: bool
    resolved: bool
    failed_apply_patch: bool
    error_eval: bool
    test_timeout: bool
