"""
Pydantic data models for SWE-bench reports generated by OpenHands.
"""

from __future__ import annotations

import os
from pydantic import BaseModel, FilePath


class BenchmarkPath(BaseModel):
    """
    Ensures the files necessary for a benchmark exist.
    """

    trajectories: FilePath
    results: FilePath
    metadata: FilePath

    @staticmethod
    def from_directory(
        directory: str,
        trajectory_filename: str = "output.jsonl",
        results_filename: str = "output.swebench_eval.jsonl",
        metadata_filename: str = "metadata.json",
    ) -> BenchmarkPath:
        """
        Build a benchmark path object from the files in the directory.
        """
        return BenchmarkPath(
            trajectories=FilePath(os.path.join(directory, trajectory_filename)),
            results=FilePath(os.path.join(directory, results_filename)),
            metadata=FilePath(os.path.join(directory, metadata_filename)),
        )

    @property
    def name(self) -> str:
        """
        The name of the benchmark.
        """
        return os.path.basename(os.path.dirname(self.trajectories))


class AgentMetadata(BaseModel):
    """
    Metadata capturing the configuration of the OpenHands agent.
    """

    agent_class: str
    llm_config: LLMConfig
    max_iterations: int
    git_commit: str
    dataset: str


class LLMConfig(BaseModel):
    """
    Metadata capturing the configuration of the LLM used by an OpenHands agent.
    """

    model: str
    embedding_model: str
    temperature: float
    top_p: float
