"""
Pydantic data models for SWE-bench reports generated by OpenHands.
"""

from __future__ import annotations

import os
from typing import Iterable, Any
from pydantic import BaseModel, FilePath

from .swe_bench import SWEBenchInstance

# pylint: disable=unspecified-encoding


class BenchmarkPath(BaseModel):
    """
    Ensures the files necessary for a benchmark exist.
    """

    trajectories: FilePath
    results: FilePath
    metadata: FilePath

    @staticmethod
    def from_directory(
        directory: str,
        trajectory_filename: str = "output.jsonl",
        results_filename: str = "output.swebench_eval.jsonl",
        metadata_filename: str = "metadata.json",
    ) -> BenchmarkPath:
        """
        Build a benchmark path object from the files in the directory.
        """
        return BenchmarkPath(
            trajectories=FilePath(os.path.join(directory, trajectory_filename)),
            results=FilePath(os.path.join(directory, results_filename)),
            metadata=FilePath(os.path.join(directory, metadata_filename)),
        )

    @property
    def name(self) -> str:
        """
        The name of the benchmark.
        """
        return os.path.basename(os.path.dirname(self.trajectories))

    def load_results(self) -> dict[str, SWEBenchInstance]:
        """
        Load the contents of the results file.
        """
        results: dict[str, SWEBenchInstance] = {}
        with open(self.results, "r") as file:
            for line in file.readlines():
                instance = SWEBenchInstance.model_validate_json(line)
                results[instance.instance_id] = instance

        return results

    def load_metadata(self) -> AgentMetadata:
        """
        Load the contents of the metadata file.
        """
        with open(self.metadata, "r") as file:
            return AgentMetadata.model_validate_json(file.read())

    def load_trajectories(self) -> Iterable[Trajectory]:
        """
        Load the contents of the trajectory file.
        """
        with open(self.trajectories, "r") as file:
            for line in file.readlines():
                yield Trajectory.model_validate_json(line)


class AgentMetadata(BaseModel):
    """
    Metadata capturing the configuration of the OpenHands agent.
    """

    agent_class: str
    llm_config: LLMConfig
    max_iterations: int
    git_commit: str
    dataset: str

    def dump(self) -> dict[str, Any]:
        """
        Convert the object to a simple dictionary.

        Unlike the builtin `model_dump` method, this flattens any sub-structures.
        """
        return {
            "agent_class": self.agent_class,
            "max_iterations": self.max_iterations,
            **self.llm_config.model_dump(),
        }


class LLMConfig(BaseModel):
    """
    Metadata capturing the configuration of the LLM used by an OpenHands agent.
    """

    model: str
    embedding_model: str
    temperature: float
    top_p: float


class Trajectory(BaseModel):
    """
    OpenHands agent trajectory.
    """

    instance_id: str
    history: list[dict]
    instance: SWEInstance


class SWEInstance(BaseModel):
    problem_statement: str
